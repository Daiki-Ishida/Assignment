#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('assignment:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// socket.io
const models = require('../models');
const io = require('socket.io')(server);
var sharedsession = require("express-socket.io-session");
var sessionMiddleware = app.session;

const globalChat = io.of('/chat/top');
globalChat.use(sharedsession(sessionMiddleware, {
  autoSave: true
}));
globalChat.on('connection', function (socket) {
  console.log('global chat connected');
  socket.on('req', async (content) => {
    const user = await models.User.findByPk(socket.handshake.session.uid);
    const data = {
      userName: user.name,
      content: content
    }
    globalChat.emit('res', data);
  })
});
const privateChat = io.of('/chat/rooms');
privateChat.use(sharedsession(sessionMiddleware, {
  autoSave: true
}));
privateChat.on('connection', function (socket) {
  let room = ''
  socket.on('joinToRoom', async (roomId) => {
    const user = await models.User.findByPk(socket.handshake.session.uid);
    room = await models.Room.findByPk(roomId, {
      include: [{
        model: models.Message,
        include: [{
          model: models.User,
          attributes: ['name']
        }]
      }]
    });
    if (!user) {
      socket.close();
    } else {
      const entryNotice = `${user.name} joined to this room!`;
      socket.join(room.id);
      socket.broadcast.to(room.id).emit('notice', entryNotice);
      socket.emit('init', room.Messages);
      console.log('a user join the room: ' + room.name);
    }
  })

  socket.on('req', async (content) => {
    const user = await models.User.findByPk(socket.handshake.session.uid);
    if (!user) {
      socket.close();
    } else {
      const data = {
        userName: user.name,
        content: content
      }
      models.Message.create({
        content: content,
        user_id: user.id,
        room_id: room.id
      })
      privateChat.to(room.id).emit('res', data);
    }
  })
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
